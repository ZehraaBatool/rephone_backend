import axios from "axios";
import * as qs from "qs";
import { HttpClient, HttpClientResponse, } from "./HttpClient.js";
export class AxiosHttpClient extends HttpClient {
    /** @override. */
    getClientName() {
        return "node";
    }
    makeRequest(host, path, method, headers, requestData, requestParams, timeout) {
        return axios
            .create()
            .request({
            timeout: timeout,
            method: method,
            url: `${host}${path}`,
            headers: headers,
            data: requestData,
            params: requestParams,
            paramsSerializer: (params) => {
                return qs.stringify(params, {
                    arrayFormat: "indices",
                    encode: false,
                });
            },
        })
            .then((response) => {
            return new AxiosHttpClientResponse(response);
        })
            .catch((error) => {
            if (error.response) {
                const data = error.response.data;
                // @ts-ignore
                if (data.error) {
                    return new AxiosHttpClientResponse({
                        status: error.response.status,
                        headers: error.response.headers,
                        data: {
                            // @ts-ignore
                            message: data.error,
                        },
                    });
                    // @ts-ignore
                }
                else if (data.message) {
                    return new AxiosHttpClientResponse({
                        status: error.response.status,
                        headers: error.response.headers,
                        data: {
                            // @ts-ignore
                            message: data.message,
                        },
                    });
                }
                else {
                    return new AxiosHttpClientResponse({
                        status: error.response.status,
                        headers: error.response.headers,
                        data: {
                            // @ts-ignore
                            message: data.status.errors.join(", "),
                        },
                    });
                }
            }
            else if (error.request) {
                return new AxiosHttpClientResponse({
                    status: 500,
                    headers: {},
                    data: {
                        message: "The request was made but no response was received",
                    },
                });
            }
            else {
                return new AxiosHttpClientResponse({
                    status: 500,
                    headers: {},
                    data: {
                        message: "Something happened in setting up the request that triggered an Error",
                    },
                });
            }
        });
    }
}
export class AxiosHttpClientResponse extends HttpClientResponse {
    constructor(res) {
        // @ts-ignore
        super(res.status, res.headers || {});
        this._res = res;
    }
    toJSON() {
        return new Promise((resolve) => resolve(this._res.data));
    }
}
