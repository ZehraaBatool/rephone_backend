"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSafepay = void 0;
const _Error = require("./Error.js");
const RequestSender_js_1 = require("./RequestSender.js");
const SafepayResource_js_1 = require("./SafepayResource.js");
const HttpClient_js_1 = require("./net/HttpClient.js");
const utils_js_1 = require("./utils.js");
const AxiosHttpClient_js_1 = require("./net/AxiosHttpClient.js");
const resources = require("./resources.js");
const Checkout_js_1 = require("./Checkout.js");
const DEFAULT_HOST = "api.getsafepay.com";
const DEFAULT_TIMEOUT = 80000;
const DEFAULT_AUTH_TYPE = "secret";
const AUTH_TYPES = ["jwt", "secret"];
const ALLOWED_CONFIG_PROPERTIES = ["httpClient", "timeout", "host", "authType"];
const defaultRequestSenderFactory = (safepay) => new RequestSender_js_1.RequestSender(safepay);
function createSafepay(requestSender = defaultRequestSenderFactory) {
    Safepay.SafepayResource = SafepayResource_js_1.SafepayResource;
    Safepay.HttpClient = HttpClient_js_1.HttpClient;
    Safepay.HttpClientResponse = HttpClient_js_1.HttpClientResponse;
    Safepay.checkout = (0, Checkout_js_1.createCheckout)();
    function Safepay(key, config = {}) {
        if (!(this instanceof Safepay)) {
            return new Safepay(key, config);
        }
        const props = this._getPropsFromConfig(config);
        this._api = {
            auth: null,
            host: props.host || DEFAULT_HOST,
            timeout: (0, utils_js_1.validateInteger)("timeout", props.timeout, DEFAULT_TIMEOUT),
            httpClient: props.httpClient || new AxiosHttpClient_js_1.AxiosHttpClient(),
            authType: props.authType || DEFAULT_AUTH_TYPE,
        };
        this._prepResources();
        if (this._api.authType === DEFAULT_AUTH_TYPE) {
            this._setSecretKey(key);
        }
        else {
            this._setSessionKey(key);
        }
        this._setApiField("authType", this._api.authType);
        this.errors = _Error;
        this._requestSender = requestSender(this);
        // Expose SafepayResource on the instance too
        // @ts-ignore
        this.SafepayResource = Safepay.SafepayResource;
        this.checkout = (0, Checkout_js_1.createCheckout)();
    }
    Safepay.errors = _Error;
    Safepay.prototype = {
        SafepayResource: null,
        _api: null,
        errors: null,
        _requestSender: null,
        checkout: null,
        /**
         * @private
         */
        _setSessionKey(key) {
            if (key) {
                this._setApiField("auth", `Bearer ${key}`);
            }
        },
        /**
         * @private
         */
        _setSecretKey(key) {
            if (key) {
                this._setApiField("auth", key);
            }
        },
        /**
         * @private
         * This may be removed in the future.
         */
        _setApiField(key, value) {
            this._api[key] = value;
        },
        /**
         * @private
         *
         * It may be deprecated and removed in the future.
         */
        getApiField(key) {
            return this._api[key];
        },
        /**
         * @private
         * This may be removed in the future.
         */
        _prepResources() {
            for (const name in resources) {
                // @ts-ignore
                this[(0, utils_js_1.pascalToCamelCase)(name)] = new resources[name](this);
            }
        },
        /**
         * @private
         * This may be removed in the future.
         */
        _getPropsFromConfig(config) {
            // If config is null or undefined, just bail early with no props
            if (!config) {
                throw new Error("Config object may not be empty");
            }
            // config can only be an object
            const isObject = config === Object(config) && !Array.isArray(config);
            if (!isObject) {
                throw new Error("Config must be an object");
            }
            // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values
            const values = Object.keys(config).filter((value) => !ALLOWED_CONFIG_PROPERTIES.includes(value));
            if (config.authType) {
                if (!AUTH_TYPES.includes(config.authType)) {
                    throw new Error(`authType may be one of ${AUTH_TYPES.join(", ")}`);
                }
            }
            if (values.length > 0) {
                throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(", ")}`);
            }
            return config;
        },
    };
    return Safepay;
}
exports.createSafepay = createSafepay;
